function varargout = PRintervalGUI(varargin)
% PRINTERVALGUI MATLAB code for PRintervalGUI.fig
%      PRINTERVALGUI, by itself, creates a new PRINTERVALGUI or raises the existing
%      singleton*.
%
%      H = PRINTERVALGUI returns the handle to a new PRINTERVALGUI or the handle to
%      the existing singleton*.
%
%      PRINTERVALGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PRINTERVALGUI.M with the given input arguments.
%
%      PRINTERVALGUI('Property','Value',...) creates a new PRINTERVALGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before PRintervalGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to PRintervalGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help PRintervalGUI

% Last Modified by GUIDE v2.5 19-Nov-2015 21:30:39

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @PRintervalGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @PRintervalGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before PRintervalGUI is made visible.
function PRintervalGUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to PRintervalGUI (see VARARGIN)
% create variables to hold current PR intervals
uint8 PRhigh;
uint8 PRlow; 

% Choose default command line output for PRintervalGUI
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes PRintervalGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = PRintervalGUI_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
updateNum = get(handles.edit1, 'String');
 desiredPRint = str2num(updateNum);
 if(desiredPRint < 100) || (desiredPRint > 260)
     set(handles.edit1, 'String', 'invalid')
 else
     %convert 1-decimal to two 8bit numbers
     diff = 263 - desiredPRint; %timer value in ms
     num = round(diff/0.004013); %timer value in cycles, decimal
     numhex = dec2hex(num, 4); %4 digit hex string
     hexHigh = numhex(1:2);
     hexLow = numhex(3:4);
     
     fileID = fopen('C:/Users/Jessica/Documents/GitHub/BME464-Pacemaker/pacemaker_V.c', 'r+');
     
     PRhighline = fgets(fileID);
     while isempty(regexp(PRhighline, 'int PRhigh'))
         PRhighline = fgets(fileID);
     end
     
     %get line byte offset
     position = ftell(fileID);
     
     %modify PRhigh
     PRhighline(16:17) = hexHigh;
     fseek(fileID, position-length(PRhighline), 'bof'); %switch to write mode
     fwrite(fileID, PRhighline, 'char*1'); %write new line
     fseek(fileID, position, 'bof'); %switch to read mode
     %PRhighline = fgets(fileID);
     
     %modify PRlow
     PRlowline = fgets(fileID);
     position2 = ftell(fileID);
     PRlowline(15:16) = hexLow;
     fseek(fileID, position2-length(PRlowline), 'bof'); %switch to write mode
     fwrite(fileID, PRlowline, 'char*1'); %write new line
     fseek(fileID, position2-length(PRlowline), 'bof'); %switch to read mode
     
     fclose(fileID);

     
     %update statement
     set(handles.text2, 'String', sprintf('The current PR interval wait time is %dms.\nYou must reprogram the pacemaker for the change to take effect.', desiredPRint));
 end


% --- Executes during object creation, after setting all properties.
function text2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to text2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

